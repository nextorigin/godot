// Generated by CoffeeScript 1.6.3
(function() {
  var Reactor, ReadWriteStream, events, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require("events");

  uuid = require("node-uuid");

  ReadWriteStream = require("../common/read-write-stream");

  Reactor = (function(_super) {
    __extends(Reactor, _super);

    function Reactor(options) {
      if (options == null) {
        options = {};
      }
      this.chainReactors = __bind(this.chainReactors, this);
      events.EventEmitter.call(this);
      if (typeof options === "string") {
        options = {
          name: options
        };
      }
      this.reactors = [];
      this.id = uuid.v4();
      this.name = options.name;
    }

    Reactor.prototype.chainReactors = function(last, nextOptions) {
      var stream;
      stream = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(nextOptions.Factory, nextOptions.args, function(){});
      stream.name = this.name;
      stream.id = this.id;
      stream.on("error", this.emit.bind(this, "error"));
      stream.on("reactor:error", this.emit.bind(this, "reactor:error"));
      return last.pipe(stream);
    };

    Reactor.prototype.createStream = function(source) {
      if (source == null) {
        source = new ReadWriteStream;
      }
      source.on("error", this.emit.bind(this, "error"));
      return this.reactors.reduce(this.chainReactors, source);
    };

    return Reactor;

  })(events.EventEmitter);

  module.exports = Reactor;

}).call(this);
